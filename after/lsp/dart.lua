local filetypes = { "dart" }
local root_markers = { "pubspec.yaml", "analysis_options.yaml", ".dart_tool" }

---@type vim.lsp.Config
return {
	enable = true,
	name = "Dart LSP",
	cmd = { "dart", "language-server", "--protocol=lsp" },
	filetypes = filetypes,
	root_markers = root_markers,
	root_dir = vim.fs.dirname(vim.fs.find(root_markers, { upward = true })[1]),
	trace = "verbose",
	log_level = vim.lsp.protocol.MessageType.Warning,
	single_file_support = true,
	capabilities = require("utils.capabilities").complete(),
	on_attach = require("utils.attach").on,
	init_options = {
		additionalAnalyzerFileExtensions = { ".proto" },
		allowAnalytics = true,
		allowTestsOutsideTestFolder = true,
		analysisExcludedFolders = {},
		analysisServerFolding = true,
		analyzeAngularTemplates = true,
		analyzerAdditionalArgs = {},
		analyzerDiagnosticsPort = vim.NIL,
		analyzerInstrumentationLogFile = vim.NIL,
		analyzerLogFile = vim.NIL,
		analyzerPath = vim.NIL,
		analyzerSshHost = vim.NIL,
		analyzerVmServicePort = vim.NIL,
		autoImportCompletions = true,
		automaticCommentSlashes = "tripleSlash",
		buildRunnerAdditionalArgs = {},
		checkForSdkUpdates = true,
		cliConsole = "debugConsole",
		closingLabels = true,
		completeFunctionCalls = true,
		dapLogFile = vim.NIL,
		debugExtensionBackendProtocol = "ws",
		debugExternalLibraries = true,
		debugSdkLibraries = true,
		devToolsBrowser = "default",
		devToolsLogFile = vim.NIL,
		devToolsPort = vim.NIL,
		devToolsReuseWindows = true,
		devToolsTheme = "dark",
		doNotFormat = false,
		embedDevTools = true,
		enableCompletionCommitCharacters = true,
		enableSdkFormatter = true,
		enableServerSnippets = true,
		enableSnippets = true,
		env = vim.empty_dict(),
		evaluateGettersInDebugViews = true,
		evaluateToStringInDebugViews = true,
		extensionLogFile = vim.NIL,
		flutterAdditionalArgs = {},
		flutterAttachAdditionalArgs = {},
		flutterCreateAndroidLanguage = "kotlin",
		flutterCreateIOSLanguage = "swift",
		flutterCreateOffline = false,
		flutterDaemonLogFile = vim.NIL,
		flutterGutterIcons = true,
		flutterHotReloadOnSave = "manual",
		flutterHotRestartOnSave = "always",
		flutterOutline = true,
		flutterRunAdditionalArgs = {},
		flutterRunLogFile = vim.NIL,
		flutterScreenshotPath = vim.NIL,
		flutterSdkPath = vim.NIL,
		flutterSdkPaths = {},
		flutterSshHost = vim.NIL,
		flutterShowEmulators = "local",
		flutterShowWebServerDevice = "remote",
		flutterStructuredErrors = true,
		flutterTestAdditionalArgs = {},
		flutterTestLogFile = vim.NIL,
		flutterTrackWidgetCreation = vim.NIL,
		flutterWebRenderer = "auto",
		hotReloadProgress = "notification",
		insertArgumentPlaceholders = true,
		lspSnippetTextEdits = true,
		maxLogLineLength = 2000,
		notifyAnalyzerErrors = true,
		openDevTools = "never",
		openTestView = { "runTestStart" },
		previewBazelWorkspaceCustomScripts = false,
		previewCommitCharacters = true,
		previewFlutterUiGuides = true,
		previewFlutterUiGuidesCustomTracking = true,
		previewHotReloadOnSaveWatcher = true,
		previewLsp = true,
		promptToGetPackages = true,
		promptToRunIfErrors = true,
		pubAdditionalArgs = {},
		pubTestLogFile = vim.NIL,
		runPubGetOnPubspecChanges = true,
		sdkPath = vim.NIL,
		sdkPaths = {},
		sendDevToolsWithFlutter = true,
		showDartDeveloperLogs = true,
		showDartPadSampleCodeLens = true,
		showDevToolsDebugToolBarButtons = true,
		showIgnoreQuickFixes = true,
		showInspectorNotificationsForWidgetErrors = true,
		showMainCodeLens = true,
		showSkippedTests = true,
		showTestCodeLens = true,
		showTodos = true,
		triggerSignatureHelpAutomatically = true,
		updateImportsOnRename = true,
		useKnownChromeOSPorts = true,
		vmAdditionalArgs = {},
		warnWhenEditingFilesInPubCache = true,
		warnWhenEditingFilesOutsideWorkspace = true,
		webDaemonLogFile = vim.NIL,

		showLastParamHint = true,
		singleFileAnalysis = false,
		useFlutterTimelines = true,
		userDefinedSymbols = {},
		vmServiceLogFile = vim.NIL,
	},
	settings = {
		dart = {
			completeFunctionCalls = true,
			showTodos = true,
		},
	},
}
