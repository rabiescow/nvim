local filetypes = { "elixir", "eelixir", "heex", "surface" }
local root_markers = { ".formatter.exs", ".elixir_ls", "mix.exs", ".git" }

---@type vim.lsp.Config
return {
	enable = true,
	name = "elixir-ls",
	cmd = { "elixir-ls" },
	filetypes = filetypes,
	root_markers = root_markers,
	root_dir = vim.fs.dirname(vim.fs.find(root_markers, { upward = true })[1]),
	log_level = vim.lsp.protocol.MessageType.Warning,
	trace = "verbose",
	single_file_support = true,
	capabilities = require("utils.capabilities").complete(),
	on_attach = require("utils.attach").on,
	settings = {
		autoBuild = true,
		dialyzerEnabled = true,
		incrementalDialyzer = true,
		dialyzerWarnOpts = {
			"error_handling",
			"no_behaviours",
			"no_contracts",
			"no_fail_call",
			"no_fun_app",
			"no_improper_lists",
			"no_match",
			"no_missing_calls",
			"no_opaque",
			"no_return",
			"no_undefined_callbacks",
			"no_underspecs",
			"no_unknown",
			"no_unused",
			"underspecs",
			"unknown",
			"unmatched_returns",
			"overspecs",
			"specdiffs",
			"overlapping_contract",
			"extra_return",
			"no_extra_return",
			"missing_return",
			"no_missing_return",
			"opaque_union",
		},
		dialyzerFormat = "dialyxir_long",
		envVariables = "",
		mixEnv = "dev",
		mixTarget = "dev",
		projectDir = "dev",
		stdlibSrcDir = "",
		useCurrentRootFolderAsProjectDir = true,
		fetchDeps = true,
		suggestSpecs = true,
		trace = { server = "off" },
		autoInsertRequiredAlias = false,
		signatureAfterComplete = true,
		enableTestLenses = false,
		additionalWatchedExtensions = {},
		languageServerOverridePath = "",
	},
}
