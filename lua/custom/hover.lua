-- Displays Line Diagnostics in a floating window at the top of the
-- buffer when hovering over the line.
-- function Hover()
--   local group = vim.api.nvim_create_augroup("Diagnostics", {})
--   local buffer = vim.api.nvim_get_current_buf()
--   local event = { 'CursorHold', 'CursorHoldI' }
--   local hoverOpts = {
--     focusable = false,
--     close_events = { "BufLeave", "CursorMoved", "InsertEnter", "FocusLost" },
--     scope = "line",
--     header = "Line diagnostics:",
--     width = 40,
--     height = 15,
--     max_heigth = 15,
--   }
--   local secondaryOpts = {
--     focusable = false,
--     close_events = { "BufLeave", "CursorMoved", "InsertEnter", "FocusLost" },
--     source = "always",
--   }
--   local dialog = {
--     relative = "win",
--     win = vim.api.nvim_get_current_win(),
--     anchor = "NW",
--     row = 1,
--     col = 43,
--     focusable = false,
--     title = "Line Diagnostics",
--     title_pos = "center",
--     fixed = true,
--   }
--   vim.api.nvim_create_autocmd(event, {
--     buffer = buffer,
--     group = group,
--
--     callback = function()
--       local _, windownr =
--           vim.diagnostic.open_float(hoverOpts, { focusable = false })
--       if windownr ~= nil then
--         local config = vim.api.nvim_win_get_config(windownr)
--         config = vim.tbl_extend("force", config, dialog)
--         vim.api.nvim_win_set_config(windownr, config)
--       end
--     end
--   })
-- end
--
-- function Lens()
--   local group = vim.api.nvim_create_augroup("Lens", {})
--   local buffer = vim.api.nvim_get_current_buf()
--   local events = { "BufEnter", "InsertLeave", "CursorHold" }
--   vim.api.nvim_create_autocmd(events, {
--     buffer = buffer,
--     group = group,
--     callback = function()
--       vim.lsp.codelens.refresh()
--     end
--   })
-- end
--
-- vim.cmd([[
--       " make hover window"s background transparent
--       lua Hover()
--       lua Lens()
--     ]])
